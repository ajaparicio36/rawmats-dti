// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(cuid())
  email          String         @unique
  displayName    String
  profilePicture String         @default("/users/default.jpg")
  phoneNumber    String         @default("None")
  role           Role           @default(USER)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  supplier       Supplier? // Optional because not every user is a supplier
  favorites      Favorite[] // One user can have many favorites
  albums         Album[] // One user can have many albums
  notifications  Notification[]
  conversations  Conversation[] // One user can have many conversations
  messages       Message[] // One user can send many messages
}

enum Role {
  USER
  ADMIN
}

model Supplier {
  id               String    @id @default(cuid())
  userId           String    @unique // One-to-one with User
  user             User      @relation(fields: [userId], references: [id])
  businessPicture  String    @default("/businesses/default.jpg")
  businessName     String    @unique
  businessLocation String
  businessPhone    String    @default("None")
  bio              String    @default("None")
  verified         Boolean   @default(false)
  verifiedDate     DateTime  @updatedAt
  products         Product[]
}

model Product {
  id           String     @id @default(cuid())
  name         String
  description  String
  image        String     @default("/products/default.jpg")
  price        Float
  supplierId   String
  dateAdded    DateTime   @default(now())
  verified     Boolean    @default(false)
  verifiedDate DateTime   @updatedAt
  supplier     Supplier   @relation(fields: [supplierId], references: [id])
  favorites    Favorite[] // One product can have many favorites
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now()) // Track when the item was favorited
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  albums    Album[] // A favorite can be in multiple albums

  @@unique([userId, productId]) // Ensure a user can't favorite the same product twice
}

model Album {
  id          String     @id @default(cuid())
  name        String
  description String
  userId      String
  createdAt   DateTime   @default(now())
  user        User       @relation(fields: [userId], references: [id])
  favorites   Favorite[] // An album can contain many favorites
}

model Notification {
  id        String   @id @default(cuid())
  content   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Conversation {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]
  members   User[]
}

model Message {
  id             String       @id @default(cuid())
  content        String
  messageType    MessageType
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  conversationId String
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id])
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
}
