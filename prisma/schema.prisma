generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(cuid())
  email          String         @unique
  displayName    String
  role           Role           @default(USER)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  phoneNumber    String         @default("None")
  profilePicture String         @default("/users/default.jpg")
  albums         Album[]
  favorites      Favorite[]
  notifications  Notification[]
  supplier       Supplier?
  conversations  ConversationUser[] 
  messages Message[]
}

model Supplier {
  id               String    @id @default(cuid())
  userId           String    @unique
  businessName     String    @unique
  businessLocation String
  verified         Boolean   @default(false)
  verifiedDate     DateTime  @updatedAt
  bio              String    @default("None")
  businessPhone    String    @default("None")
  businessPicture  String    @default("/businesses/default.jpg")
  products         Product[]
  user             User      @relation(fields: [userId], references: [id])
}

model Product {
  id           String     @id @default(cuid())
  name         String
  description  String
  price        Float
  supplierId   String
  dateAdded    DateTime   @default(now())
  verified     Boolean    @default(false)
  verifiedDate DateTime   @updatedAt
  image        String     @default("/products/default.jpg")
  favorites    Favorite[]
  supplier     Supplier   @relation(fields: [supplierId], references: [id])
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  albums    Album[]  @relation("AlbumToFavorite")

  @@unique([userId, productId])
}

model Album {
  id          String     @id @default(cuid())
  name        String
  description String
  createdAt   DateTime   @default(now())
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  favorites   Favorite[] @relation("AlbumToFavorite")
}

model Notification {
  id        String   @id @default(cuid())
  content   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    String
  title     String
  user      User     @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
}

model Conversation {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  messages      Message[]
  participants  ConversationUser[]
}

model ConversationUser {
  userId         String
  conversationId String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@id([userId, conversationId])  
}

model Message {
  id             String       @id @default(cuid())
  content        String
  messageType    MessageType
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  conversationId String
  userId         String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}


enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
}